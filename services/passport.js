// used for Google Oauth
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const keys = require('../config/keys');
const mongoose = require('mongoose');

// model class - for adding model instances (records) to the collection 'users'
const User = mongoose.model('users');

passport.serializeUser((user, done) => {
    done(null, user.id); //user.id is generated by mongo - used for cookie
});

passport.deserializeUser((id, done)=>{ //user id
    User.findById(id).then(user => {
        done(null, user);
    })
});

// let passport use Google strategy to authenticate users using Google
passport.use(
    new GoogleStrategy(
        {
            clientID: keys.googleClientID, // get client ID
            clientSecret: keys.googleClientSecret, // get secret
            callbackURL: '/auth/google/callback', //route user will be sent to after granting permissions to server
            proxy: true
        },
        //callback function (called from /auth/google/callback)
        (accessToken, refreshToken, profile, done) => {
            // use mongoose to query database - search if user already exists in 'users'
            User.findOne({ googleId: profile.id }) // attempt to find first record of - returns a promise
                .then((existingUser) => {
                    //if record "existingUser" exists
                    if (existingUser) { 
                        // we already have a record with the given profile ID
                        done(null, existingUser); // no error, record found
                    } else {
                        // we don't have a user record with this ID, make a new record
                        // new model instance (record) and adds record to database 
                        new User({ googleId: profile.id }).save()
                            .then(user => done(null, user)) //user is not the same as the User just created. (user is record from database)
                    }
                })
        }
    )
);